package Analyzer;
import java_cup.runtime.*;
import AST.*;

parser code
{:

  private Object AST;
  public Object GetAST(){
    return AST;
  }

  public void syntax_error(Symbol s){
          System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
  }
  /**
   * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
   **/
  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
          System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
  }

:}


terminal double Entero;
terminal double Decimal;
terminal Plus;
terminal Minus;
terminal Times;
terminal Divide;
terminal Par_Left;
terminal Par_Right;

non terminal Start;
non terminal Expresion terminals;
non terminal Expresion Exp; 

precedence left Plus, Minus;
precedence left Times, Divide;


start with Start;

Start ::= Exp:a  {:
                        this.parser.AST = a;
                        System.out.println("AST GENERADO "); 
                :}
           ;

Exp ::=   Exp:a Plus   Exp:b            {: RESULT = new Suma(a,b);              :}
        | Exp:a Minus  Exp:b            {: RESULT = new Resta(a,b);             :}
        | Exp:a Times  Exp:b            {: RESULT = new Multiplicacion(a,b);    :}
        | Exp:a Divide Exp:b            {: RESULT = new Division(a,b);        :}
        | Par_Left Exp:a Par_Right      {: RESULT = a; :}
        | terminals:a                   {: RESULT = a; :}
        ;

terminals::= Decimal:a   {:     RESULT = new Decimal(a);   :}
           | Entero:a    {:     RESULT = new Decimal(a);   :}   
           ;
